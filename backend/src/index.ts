import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import express from "express";
import cors from "cors";
import bodyParser from "body-parser"; // Dodaj kolory (npm install chalk)
import classifyRoute from "./routes/classify";

const app = express();

app.use(cors());
app.use(bodyParser.json());
app.use("/api/classify", classifyRoute);

/**
 * Generuje drzewo folderÃ³w z kolorami i obsÅ‚ugÄ… bÅ‚Ä™dÃ³w.
 * @param dirPath ÅšcieÅ¼ka startowa.
 * @param prefix Prefix dla wciÄ™Ä‡ (uÅ¼ywane rekurencyjnie).
 * @returns Linie drzewa folderÃ³w.
 */
function generateFolderTree(dirPath: string, prefix = ''): string[] {
    const tree: string[] = [];
    try {
        const entries = fs.readdirSync(dirPath).sort();
        
        entries.forEach((entry, index) => {
            const fullPath = path.join(dirPath, entry);
            const isLast = index === entries.length - 1;
            
            // Formatowanie linii
            const line = prefix + (isLast ? 'â””â”€â”€ ' : 'â”œâ”€â”€ ') + 
                (fs.statSync(fullPath).isDirectory() ? chalk.blue(entry) : chalk.green(entry));
            tree.push(line);

            // Rekurencyjne przeglÄ…danie folderÃ³w (pomijanie linkÃ³w symbolicznych)
            if (fs.statSync(fullPath).isDirectory() && !fs.lstatSync(fullPath).isSymbolicLink()) {
                const newPrefix = prefix + (isLast ? '    ' : 'â”‚   ');
                tree.push(...generateFolderTree(fullPath, newPrefix));
            }
        });
    } catch (error) {
        tree.push(prefix + 'â””â”€â”€ ' + chalk.red(`[Error: ${error instanceof Error ? error.message : String(error)}]`));
    }
    return tree;
}

// PrzykÅ‚ad uÅ¼ycia:
const targetDir = process.argv[2] || '.'; // ÅšcieÅ¼ka z argumentu lub bieÅ¼Ä…cy folder
console.log(chalk.yellow(`ðŸŒ³ Drzewo folderÃ³w dla: ${targetDir}\n`));
generateFolderTree(targetDir).forEach(line => console.log(line));